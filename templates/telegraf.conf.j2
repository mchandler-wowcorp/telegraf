# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared plugins.

# Even if a plugin has no configuration, it must be declared in here
# to be active. Declaring a plugin means just specifying the name
# as a section with no variables. To deactivate a plugin, comment
# out the name and any variables.

# Use 'telegraf -config telegraf.toml -test' to see what metrics a config
# file would generate.

# One rule that plugins conform to is wherever a connection string
# can be passed, the values '' and 'localhost' are treated specially.
# They indicate to the plugin to use their own builtin configuration to
# connect to the local system.

# NOTE: The configuration has a few required parameters. They are marked
# with 'required'. Be sure to edit those to make this configuration work.

# Tags can also be specified via a normal map, but only one form at a time:
[global_tags]
{% if telegraf_tags is defined and telegraf_tags != None %}
{% for key, value in telegraf_tags.items()%}
   {{ key }} = "{{ value }}"
{% endfor %}
{% endif %}
{% if telegraf_aws_tags == true and ec2_tags is defined and ec2_tags != None %}
{% for key, value in ec2_tags.tags.items()%}
   {{ telegraf_aws_tags_prefix }}{{ key }} = "{{ value }}"
{% endfor %}
{% endif %}

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "{{ telegraf_agent_interval }}"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = {{ telegraf_round_interval }}

  ## Telegraf will send metrics to outputs in batches of at
  ## most metric_batch_size metrics.
  metric_batch_size = {{ telegraf_metric_batch_size }}
  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  metric_buffer_limit = {{ telegraf_metric_buffer_limit }}

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "{{ telegraf_collection_jitter }}"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "{{ telegraf_flush_interval }}"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "{{ telegraf_flush_jitter }}"

  ## Run telegraf in debug mode
  debug = {{ telegraf_debug }}
  ## Run telegraf in quiet mode
  quiet = {{ telegraf_quiet }}

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"
  logtarget = "{{ telegraf_logtarget }}"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""
  logfile = "{{ telegraf_logfile }}"


  # Override default hostname, if empty use os.Hostname()
{% if telegraf_hostname is defined and telegraf_hostname != None %}
  hostname = "{{ telegraf_hostname }}"
{% else %}
  hostname = "{{ ansible_hostname }}"
{% endif %}

  ## If set to true, do not set the "host" tag in the telegraf agent.
  omit_hostname = {{ telegraf_omit_hostname }}

  ## Choice of SNMP Translator
  snmp_translator = "{{ telegraf_snmp_translator }}"


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

[outputs]

{%  if telegraf_http == true %}
[[outputs.http]]  # Solman

   ## URL is the address to send metrics to
   url = "{{ telegraf_http_url + '&source=' + telegraf_http_sourcetype_snmp_solman }}"
   data_format = "{{ telegraf_http_dataformat }}"
   use_batch_format = {{ telegraf_http_batch }}
   ## Provides time, index, source overrides for the HEC
   splunkmetric_hec_routing = "{{ telegraf_http_splunkmetric_hec_routing }}"
   splunkmetric_multimetric = "{{ telegraf_http_splunkmetric_multimetric }}"

   ## Additional HTTP headers
    [outputs.http.headers]
      # Should be set manually to "application/json" for json data_format
      Content-Type = "{{ telegraf_http_headers_ctype }}"
      Authorization = "{{ telegraf_http_headers_auth }}"
      X-Splunk-Request-Channel = "{{ telegraf_http_headers_xsrc }}"

   ## Only output events that have this tag which is set by the SNMP community string
    [outputs.http.tagpass]
      community = ["{{ telegraf_snmp_community_solman }}"]

[[outputs.http]]  # UPS Corp

   ## URL is the address to send metrics to
   url = "{{ telegraf_http_url + telegraf_http_sourcetype_snmp_ups_corp }}"
   data_format = "{{ telegraf_http_dataformat_ups }}"
   use_batch_format = {{ telegraf_http_batch }}
   ## Provides time, index, source overrides for the HEC
   splunkmetric_hec_routing = "{{ telegraf_http_splunkmetric_hec_routing }}"
   splunkmetric_multimetric = "{{ telegraf_http_splunkmetric_multimetric }}"

   ## Additional HTTP headers
    [outputs.http.headers]
      # Should be set manually to "application/json" for json data_format
      Content-Type = "{{ telegraf_http_headers_ctype }}"
      Authorization = "{{ telegraf_http_headers_auth_ups }}"
      X-Splunk-Request-Channel = "{{ telegraf_http_headers_xsrc }}"

   ## Only output events that have this tag which is set by the SNMP community string
    [outputs.http.tagpass]
      community = ["{{ telegraf_snmp_community_ups_corp }}"]

[[outputs.http]]  # UPS DC

   ## URL is the address to send metrics to
   url = "{{ telegraf_http_url + telegraf_http_sourcetype_snmp_ups_dc }}"
   data_format = "{{ telegraf_http_dataformat_ups }}"
   use_batch_format = {{ telegraf_http_batch }}
   ## Provides time, index, source overrides for the HEC
   splunkmetric_hec_routing = "{{ telegraf_http_splunkmetric_hec_routing }}"
   splunkmetric_multimetric = "{{ telegraf_http_splunkmetric_multimetric }}"

   ## Additional HTTP headers
    [outputs.http.headers]
      # Should be set manually to "application/json" for json data_format
      Content-Type = "{{ telegraf_http_headers_ctype }}"
      Authorization = "{{ telegraf_http_headers_auth_ups }}"
      X-Splunk-Request-Channel = "{{ telegraf_http_headers_xsrc }}"

   ## Only output events that have this tag which is set by the SNMP community string
    [outputs.http.tagpass]
      community = ["{{ telegraf_snmp_community_ups_dc }}"]

[[outputs.http]]  # UPS Store

   ## URL is the address to send metrics to
   url = "{{ telegraf_http_url + telegraf_http_sourcetype_snmp_ups_store }}"
   data_format = "{{ telegraf_http_dataformat_ups }}"
   use_batch_format = {{ telegraf_http_batch }}
   ## Provides time, index, source overrides for the HEC
   splunkmetric_hec_routing = "{{ telegraf_http_splunkmetric_hec_routing }}"
   splunkmetric_multimetric = "{{ telegraf_http_splunkmetric_multimetric }}"

   ## Additional HTTP headers
    [outputs.http.headers]
      # Should be set manually to "application/json" for json data_format
      Content-Type = "{{ telegraf_http_headers_ctype }}"
      Authorization = "{{ telegraf_http_headers_auth_ups }}"
      X-Splunk-Request-Channel = "{{ telegraf_http_headers_xsrc }}"

   ## Only output events that have this tag which is set by the SNMP community string
    [outputs.http.tagpass]
      community = ["{{ telegraf_snmp_community_ups_store }}"]

[[outputs.http]]  # VMware

   ## URL is the address to send metrics to
   url = "{{ telegraf_http_url + '&source=' + telegraf_http_sourcetype_snmp_vmware }}"
   data_format = "{{ telegraf_http_dataformat_vmware }}"
   use_batch_format = {{ telegraf_http_batch }}
   ## Provides time, index, source overrides for the HEC
   splunkmetric_hec_routing = "{{ telegraf_http_splunkmetric_hec_routing }}"
   splunkmetric_multimetric = "{{ telegraf_http_splunkmetric_multimetric }}"

   ## Additional HTTP headers
    [outputs.http.headers]
      # Should be set manually to "application/json" for json data_format
      Content-Type = "{{ telegraf_http_headers_ctype }}"
      Authorization = "{{ telegraf_http_headers_auth_vmware }}"
      X-Splunk-Request-Channel = "{{ telegraf_http_headers_xsrc }}"

   ## Only output events that have this tag which is set by the SNMP community string
    [outputs.http.tagpass]
      community = ["{{ telegraf_snmp_community_vmware }}"]

[[outputs.http]]

   ## URL is the address to send metrics to
   url = "{{ telegraf_http_url + telegraf_http_sourcetype_snmp_unknown }}"
   data_format = "{{ telegraf_http_dataformat }}"
   use_batch_format = {{ telegraf_http_batch }}
   ## Provides time, index, source overrides for the HEC
   splunkmetric_hec_routing = "{{ telegraf_http_splunkmetric_hec_routing }}"
   splunkmetric_multimetric = "{{ telegraf_http_splunkmetric_multimetric }}"

   ## Additional HTTP headers
    [outputs.http.headers]
      # Should be set manually to "application/json" for json data_format
      Content-Type = "{{ telegraf_http_headers_ctype }}"
      Authorization = "{{ telegraf_http_headers_auth }}"
      X-Splunk-Request-Channel = "{{ telegraf_http_headers_xsrc }}"

   ## Do not output events that have this tag which is set by the SNMP community string
    [outputs.http.tagdrop]
      community = [ "{{ telegraf_snmp_community_solman }}", "{{ telegraf_snmp_community_sysedge }}", "{{ telegraf_snmp_community_ups_corp }}", "{{ telegraf_snmp_community_ups_dc }}", "{{ telegraf_snmp_community_ups_store }}", "{{ telegraf_snmp_community_vmware }}" ]

{% endif %}

# Configuration for influxdb server to send metrics to
{% if telegraf_influxdb_v1 == true %}
[[outputs.influxdb]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = [ "{{ telegraf_influxdb_urls|join('","') }}" ] # required
  # The target database for metrics (telegraf will create it if not exists)
  database = "{{ telegraf_influxdb_database }}" # required
  # Precision of writes, valid values are n, u, ms, s, m, and h
  # note: using second precision greatly helps InfluxDB compression
  precision = "{{ telegraf_influxdb_precision }}"

  ## Retention policy to write to.
  retention_policy = "{{ telegraf_influxdb_retention_policy }}"
  ## Write consistency (clusters only), can be: "any", "one", "quorom", "all"
  write_consistency = "{{ telegraf_influxdb_write_consistency }}"

  # Connection timeout (for the connection with InfluxDB), formatted as a string.
  # If not provided, will default to 0 (no timeout)
  timeout = "{{ telegraf_influxdb_timeout }}"
{% if telegraf_influxdb_username is defined and telegraf_influxdb_username != None %}
  username = "{{ telegraf_influxdb_username }}"
{% endif %}
{% if telegraf_influxdb_password is defined and telegraf_influxdb_password != None %}
  password = "{{ telegraf_influxdb_password }}"
{% endif %}
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
{% if telegraf_influxdb_user_agent is defined and telegraf_influxdb_user_agent != None %}
  user_agent = "{{ telegraf_influxdb_user_agent }}"
{% endif %}
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
{% if telegraf_influxdb_udp_payload is defined and telegraf_influxdb_udp_payload != None %}
  udp_payload = {{ telegraf_influxdb_udp_payload }}
{% endif %}

  ## Optional SSL Config
{% if telegraf_influxdb_ssl_ca is defined and telegraf_influxdb_ssl_ca != None %}
  # ssl_ca = "{{ telegraf_influxdb_ssl_ca }}"
{% endif %}
{% if telegraf_influxdb_ssl_cert is defined and telegraf_influxdb_ssl_cert != None %}
  # ssl_cert = "{{ telegraf_influxdb_ssl_cert }}"
{% endif %}
{% if telegraf_influxdb_ssl_key is defined and telegraf_influxdb_ssl_key != None %}
  # ssl_key = "{{ telegraf_influxdb_ssl_key }}"
{% endif %}

{% if telegraf_influxdb_insecure_skip_verify is defined and telegraf_influxdb_insecure_skip_verify != None %}
  ## Use SSL but skip chain & host verification
  insecure_skip_verify = {{ telegraf_influxdb_insecure_skip_verify }}
{% endif %}
{% endif %}

{%  if telegraf_influxdb_v2 == true %}
[[outputs.influxdb_v2]]
  urls = [ "{{ telegraf_influxdb_urls|join('","') }}" ]
 ## Token for authentication.
{% if telegraf_influxdb_token is defined and telegraf_influxdb_token != None %}
  token = "{{ telegraf_influxdb_token }}"
{% endif %}
 ## Organization is the name of the organization you wish to write to; must exist.
{% if telegraf_influxdb_organization is defined and telegraf_influxdb_organization != None %}
  organization = "{{ telegraf_influxdb_organization }}"
{% endif %}
 ## Destination bucket to write into.
{% if telegraf_influxdb_bucket is defined and telegraf_influxdb_bucket != None %}
  bucket = "{{ telegraf_influxdb_bucket }}"
{% endif %}
{% endif %}
###############################################################################
#                                  PLUGINS                                    #
###############################################################################

{% for plugin in telegraf_plugins %}
[[inputs.{{ plugin.name }}]]
{% if plugin.options is defined %}
{% for key, value in plugin.options.items() %}
{% if value is not mapping %}
{% if value is sequence and value is not string %}
{% if value[0] is number %}
    {{ key }} = [ {{ value|join(', ') }} ]
{% else %}
    {{ key }} = [ "{{ value|join('", "') }}" ]
{% endif %}
{% else %}
{% if value == "true" or value == "false" or value is number %}
    {{ key }} = {{ value | lower }}
{% else %}
    {{ key }} = "{{ value }}"
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
{% for key, value in plugin.options.items() %}
{% if value is mapping %}
    [inputs.{{ plugin.name }}.{{ key }}]
{% for lv2_key, lv2_value in value.items() %}
{% if lv2_value is sequence and lv2_value is not string %}
{% if lv2_value[0] is number %}
      {{ lv2_key }} = [ {{ lv2_value|join(', ') }} ]
{% else %}
      {{ lv2_key }} = [ "{{ lv2_value|join('", "') }}" ]
{% endif %}
{% else %}
{% if lv2_value == "true" or lv2_value == "false" or lv2_value is number %}
      {{ lv2_key }} = {{ lv2_value | lower }}
{% else %}
      {{ lv2_key }} = "{{ lv2_value }}"
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

###############################################################################
#                             processors PLUGINS                               #
###############################################################################

{% for plugin in telegraf_plugins_procs %}
[[processors.{{ plugin.name }}]]
{% if plugin.options is defined %}
{% for key, value in plugin.options.items() %}
{% if value is not mapping %}
{% if value is sequence and value is not string %}
{% if value[0] is number %}
    {{ key }} = [ {{ value|join(', ') }} ]
{% else %}
    {{ key }} = [ "{{ value|join('", "') }}" ]
{% endif %}
{% else %}
{% if value == "true" or value == "false" or value is number %}
    {{ key }} = {{ value | lower }}
{% else %}
    {{ key }} = "{{ value }}"
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
{% for key, value in plugin.options.items() %}
{% if value is mapping %}
    [[processors.{{ plugin.name }}.{{ key }}]]
{% for lv2_key, lv2_value in value.items() %}
{% if lv2_value is sequence and lv2_value is not string %}
{% if lv2_value[0] is number %}
      {{ lv2_key }} = [ {{ lv2_value|join(', ') }} ]
{% else %}
      {{ lv2_key }} = [ "{{ lv2_value|join('", "') }}" ]
{% endif %}
{% else %}
{% if lv2_value == "true" or lv2_value == "false" or lv2_value is number %}
      {{ lv2_key }} = {{ lv2_value | lower }}
{% else %}
      {{ lv2_key }} = "{{ lv2_value }}"
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

###############################################################################
#                              service PLUGINS                                #
###############################################################################
